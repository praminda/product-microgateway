trigger: none

pr:
  - main

resources:
#   repositories:
#   - repository: product-microgateway
#     type: github
#     name: wso2/product-microgateway
#     endpoint: choreo-cicd
#     ref: main
  repositories:
    - repository: choreo-product-apim
      type: github
      name: renuka-fernando/choreo-product-apim
      endpoint: choreo-cicd

#   pipelines:
#   - pipeline: product-microgateway-CI
#     source: product-microgateway-CI 
#     trigger: 
#       branches:
#       - main

jobs:
- job: ChoreoConnectScenarioTests

  pool:
    vmImage: 'ubuntu-latest'

  variables:
    # CONTAINER_REGISTRY: choreocontrolplane.azurecr.io
    # ADAPTER_REPOSITORY: choreoipaas/choreo-mgw-adapter
    # ROUTER_REPOSITORY: choreoipaas/choreo-mgw-router
    # ENFORCER_REPOSITORY: choreoipaas/choreo-mgw-enforcer
    MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
    MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
    CC_DOCKER_IMAGE: 'renukafernando/pipeline-test:pipeline-v3'
    #    CC_DOCKER_IMAGE: 'choreocontrolplane.azurecr.io/choreoipaas/choreo-product-apim:v4.0.0-r02062021.1'
    CC_VERSION: ''
    ADAPTER_VERSION: ''
    ROUTER_VERSION: ''
    ENFORCER_VERSION: ''
    # GIT_COMMIT_ID: ''
    MAVEN_VERSION_APIM: 3.5.4
  #  MAVEN_VERSION_APIM: 3.6.3
    MAVEN_HOME_APIM: ''

  steps:    

  - checkout: self
    path: product-microgateway
  - checkout: choreo-product-apim
    path: choreo-product-apim

  # - script: |
  #     GIT_COMMIT="master-$(git rev-parse HEAD)"
  #     echo "GIT_COMMIT_ID: ${GIT_COMMIT}"
  #     echo "##vso[task.setvariable variable=GIT_COMMIT_ID]${GIT_COMMIT}"
  #   displayName: Get last commit id

  - task: DockerInstaller@0
    inputs:
      dockerVersion: 17.09.0-ce
      releaseType: stable
    displayName: Docker Installer  

  - task: GoTool@0
    inputs:
      version: '1.16.2'
    displayName: Go Tool Installer

  - script: |
      sudo apt update
      sudo apt install golint
    displayName: Golint Installer

  - script: |
      set -ex
      MVN_URL="http://www.mirrorservice.org/sites/ftp.apache.org/maven/maven-3/$(MAVEN_VERSION_APIM)/binaries/apache-maven-$(MAVEN_VERSION_APIM)-bin.tar.gz"
      wget $MVN_URL -O $(Agent.TempDirectory)/apache-maven-bin.tar.gz
      tar -xzf $(Agent.TempDirectory)/apache-maven-bin.tar.gz -C $(Pipeline.Workspace)
      echo '##vso[task.setvariable variable=MAVEN_HOME_APIM]$(Pipeline.Workspace)/apache-maven-$(MAVEN_VERSION_APIM)'
      export PATH=$(MAVEN_HOME_APIM)/bin:$PATH
      mvn --version
    displayName: Set Maven Version

  - task: Cache@2
    inputs:
      key: 'maven | "$(Agent.OS)" | $(Agent.BuildDirectory)/**/pom.xml'
      restoreKeys: |
        maven | "$(Agent.OS)"
        maven
      path: $(MAVEN_CACHE_FOLDER)
    displayName: Cache Maven local repo

#  - script: |
#      cd $(Agent.BuildDirectory)/product-microgateway
#      echo "##vso[task.setvariable variable=CC_VERSION]$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)"
#      echo "CC_VERSION: $(CC_VERSION)"
#    displayName: 'Obtain CC_VERSION'

#  - script: |
#      echo "##vso[task.setvariable variable=ADAPTER_VERSION]$(cat $(Agent.BuildDirectory)/product-microgateway/adapter/pom.xml |
#      grep -m1 "<version" | cut -d ">" -f2 | cut -d "<" -f1)"
#      echo "##vso[task.setvariable variable=ROUTER_VERSION]$(cat $(Agent.BuildDirectory)/product-microgateway/router/pom.xml |
#      grep -m1 "<version" | cut -d ">" -f2 | cut -d "<" -f1)"
#      echo "##vso[task.setvariable variable=ENFORCER_VERSION]$(cat $(Agent.BuildDirectory)/product-microgateway/enforcer/pom.xml |
#      grep -m1 "<version" | cut -d ">" -f2 | cut -d "<" -f1)"
#    displayName: Retrieve Microgateway component versions

#  - task: Maven@3
#    inputs:
#      mavenPomFile: '$(Agent.BuildDirectory)/product-microgateway/pom.xml'
#      goals: 'clean install -P Release -s .maven/settings.xml'
#      options: '-Dmaven.test.skip=true'
#      mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
#      javaHomeOption: 'JDKVersion'
#      jdkVersionOption: '1.11'
#      jdkArchitectureOption: 'x64'
#    displayName: 'Build Choreo Connect'

  - task: Maven@3
    inputs:
      mavenPomFile: '$(Agent.BuildDirectory)/product-microgateway/pom.xml'
#      mavenPomFile: '$(Agent.BuildDirectory)/product-microgateway/distribution/pom.xml'
      goals: 'clean install'
      options: '-P Release -Dmaven.test.skip=true'
      mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
      mavenVersionOption: 'Path'
      mavenDirectory: $(MAVEN_HOME_APIM)
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.11'
      jdkArchitectureOption: 'x64'
    displayName: 'Build Choreo Connect'

#  - task: Docker@2
#    displayName: Login to ACR
#    inputs:
#      command: login
#      containerRegistry: 'wso2choreo-control-plane-acr'

  - script: |
      docker login -u $(DOCKER_USER) -p $(DOCKER_PASSWORD)
    displayName: "Docker Login"

  - script: |
      set -ex -o pipefail

      # Unzip CC distribution.
      cd $(Agent.BuildDirectory)/product-microgateway/distribution
      unzip target/choreo-connect-*.zip
      cd choreo-connect-*/docker-compose/choreo-connect-with-apim

      # Replace APIM docker image name with built Choreo APIM docker image name
      ESCAPED_DOCKER_IMAGE=$(echo $(CC_DOCKER_IMAGE) | sed 's/\//\\\//g')
      sed -i -E "s/image:\s*wso2\/wso2am:[^\n]*/image: ${ESCAPED_DOCKER_IMAGE}/" docker-compose.yaml

      # Replace volume mounts for Choreo APIM.
      VOL1="- $(Agent.BuildDirectory)/choreo-product-apim/.azure/drop/deployment.toml:/home/wso2carbon/wso2am-4.0.0/repository/conf/deployment.toml"
      ESCAPED_VOL1=$(echo $VOL1 | sed 's/\//\\\//g')
      sed -i -E "s/^(\s*)\-\s*\.\/conf\/deployment\.toml:.*$/\1${ESCAPED_VOL1}/" docker-compose.yaml

      # Run the deployment.
      cat docker-compose.yaml
      docker-compose up -d
    displayName: "Deploy Runtime"

  - template: .azure/templates/wait-for-http-200.yml@choreo-product-apim
    parameters:
      URL: https://localhost:9095/health
      TIMEOUT_SECONDS: 300
      DISPLAY_NAME: 'Wait for Choreo and Choreo Connect to initialize'

  - task: Maven@3
    inputs:
      mavenPomFile: '$(Agent.BuildDirectory)/choreo-product-apim/product-scenarios/pom.xml'
      goals: 'clean install'
      options: '$(MAVEN_OPTS) -fae'
      mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
      mavenVersionOption: 'Path'
      mavenDirectory: $(MAVEN_HOME_APIM)
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.11'
      jdkArchitectureOption: 'x64'
    displayName: Run Scenario Tests

  # - task: Docker@2
  #   displayName: Login to ACR
  #   inputs:
  #     command: login
  #     containerRegistry: 'wso2choreo-control-plane-acr'

  # - script: |
  #     docker tag wso2/choreo-connect-adapter:$(ADAPTER_VERSION) $(CONTAINER_REGISTRY)/$(ADAPTER_REPOSITORY):$(GIT_COMMIT_ID)
  #     docker tag wso2/choreo-connect-adapter:$(ADAPTER_VERSION) $(CONTAINER_REGISTRY)/$(ADAPTER_REPOSITORY):latest
  #     docker tag wso2/choreo-connect-router:$(ROUTER_VERSION) $(CONTAINER_REGISTRY)/$(ROUTER_REPOSITORY):$(GIT_COMMIT_ID)
  #     docker tag wso2/choreo-connect-router:$(ROUTER_VERSION) $(CONTAINER_REGISTRY)/$(ROUTER_REPOSITORY):latest
  #     docker tag wso2/choreo-connect-enforcer:$(ENFORCER_VERSION) $(CONTAINER_REGISTRY)/$(ENFORCER_REPOSITORY):$(GIT_COMMIT_ID)
  #     docker tag wso2/choreo-connect-enforcer:$(ENFORCER_VERSION) $(CONTAINER_REGISTRY)/$(ENFORCER_REPOSITORY):latest
  #   displayName: 'Tag docker images to ACR repositories'

  # - task: Docker@2
  #   inputs:
  #     command: push
  #     containerRegistry: 'wso2choreo-control-plane-acr'
  #     repository: $(ADAPTER_REPOSITORY)
  #     tags: |
  #       $(GIT_COMMIT_ID)
  #       latest
  #     displayName: 'Push Adapter Docker image'

  # - task: Docker@2
  #   inputs:
  #     command: push
  #     containerRegistry: 'wso2choreo-control-plane-acr'
  #     repository: $(ROUTER_REPOSITORY)
  #     tags: |
  #       $(GIT_COMMIT_ID)
  #       latest
  #     displayName: 'Push Router Docker image'

  # - task: Docker@2
  #   inputs:
  #     command: push
  #     containerRegistry: 'wso2choreo-control-plane-acr'
  #     repository: $(ENFORCER_REPOSITORY)
  #     tags: |
  #       $(GIT_COMMIT_ID)
  #       latest
  #     displayName: 'Push Enforcer Docker image'
        
  # - template: templates/trivy-docker-scan.yml
  #   parameters:
  #     repository: $(ADAPTER_REPOSITORY)
  #     tag: $(GIT_COMMIT_ID)
  #     registry: $(CONTAINER_REGISTRY)

  # - template: templates/trivy-docker-scan.yml
  #   parameters:
  #     repository: $(ENFORCER_REPOSITORY)
  #     tag: $(GIT_COMMIT_ID)
  #     registry: $(CONTAINER_REGISTRY)
      
  # - template: templates/trivy-docker-scan.yml
  #   parameters:
  #     repository: $(ROUTER_REPOSITORY)
  #     tag: $(GIT_COMMIT_ID)
  #     registry: $(CONTAINER_REGISTRY)
